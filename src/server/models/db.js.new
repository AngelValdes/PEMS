// npm i --save sequelize -> ORM
// npm i --save mysql2 -> connect to mysql database
// npm i --save sqlite3 -> connect to sqllite
// npm i --save tedious -> connect to mssql
const logger = require('winston'); //logging

const Sequelize = require('sequelize');

// configure connection to database
const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASS, {
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  dialect: process.env.DB_SCHEMA, //'mysql'|'sqlite'|'postgres'|'mssql'
  logging: false,
  pool: {
    max: 5,
    min: 0,
    idle: 10000
  },
  define: {
    timestamps: true
  }
});


// ORM Entities Models and UnitOfWork
const user = sequelize.define('user', { // define user model
  id: { type: sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  username: { type: sequelize.STRING, allowNull: false },
  password: { type: sequelize.STRING, allowNull: false },
  first: sequelize.STRING,
  last: sequelize.STRING,
  dob: sequelize.DATE,
  email: sequelize.STRING,
  address: sequelize.STRING,
  city: sequelize.STRING,
  state: sequelize.STRING,
  zipCode: sequelize.STRING,
  phone: sequelize.STRING
});

/*
const userType = sequelize.define('userType', { // define userType model
  id: { type: sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  name: { type: sequelize.STRING, allowNull: false },
  description: sequelize.TEXT
},
  {
    timestamps: false
  }
);

const student = sequelize.define('student', { // define student model
  id: { type: sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  grade: sequelize.TEXT
});

const school = sequelize.define('school', { // define school model
  id: { type: sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  name: { type: sequelize.STRING, allowNull: false },
  address: sequelize.STRING,
  city: sequelize.STRING,
  state: sequelize.STRING,
  zipCode: sequelize.STRING,
  phone: sequelize.STRING
});

const bus = sequelize.define('bus', { // define bus model
  id: { type: sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  Number: { type: sequelize.STRING, allowNull: false },
  routeNumber: sequelize.STRING,
  pickupTime: sequelize.STRING,
  stopLocation: sequelize.STRING
});

const enrollment = sequelize.define('enrollment', { // define enrollment model
  id: { type: sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  room: sequelize.STRING,
  time: sequelize.STRING,
  absences: sequelize.INTEGER,
  comments: sequelize.STRING
});

const course = sequelize.define('course', { // define course model
  id: { type: sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  title: { type: sequelize.STRING, allowNull: false },
  electronicBook: sequelize.STRING
});

const teacher = sequelize.define('teacher', { // define teacher model
  id: { type: sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  certificationArea: sequelize.STRING
});

// Entities relationships (pending)
user.hasOne(userType, { foreignKey: 'userTypeId' });
student.belongsTo(user, { foreignKey: 'userId' });
*/
sequelize.sync()
  .then(() => {
      logger.log("info", "All models are synchronized\n");
    })
    .catch(() => {
      logger.log("error", "Model synchronization error: " + error + "\n");
    });

exports.user = user;/*
exports.student = student;
exports.userType = userType;*/
exports.sequelize = sequelize;


